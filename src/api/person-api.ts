/* tslint:disable */
/* eslint-disable */
/**
 * Regula FaceSDK Web API
 * [Download OpenAPI specification](https://github.com/regulaforensics/FaceSDK-web-openapi) ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { GroupPage } from '../models';
// @ts-ignore
import { Image } from '../models';
// @ts-ignore
import { ImageFields } from '../models';
// @ts-ignore
import { ImagePage } from '../models';
// @ts-ignore
import { OperationLog } from '../models';
// @ts-ignore
import { Person } from '../models';
// @ts-ignore
import { PersonFields } from '../models';
/**
 * PersonApi - axios parameter creator
 * @export
 */
export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add person image
         * @param {string} personId Person ID.
         * @param {ImageFields} imageFields Image to add.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addImageToPerson: async (personId: string, imageFields: ImageFields, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('addImageToPerson', 'personId', personId)
            // verify required parameter 'imageFields' is not null or undefined
            assertParamExists('addImageToPerson', 'imageFields', imageFields)
            const localVarPath = `/api/persons/{personId}/images`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(imageFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create person
         * @param {PersonFields} personFields 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson: async (personFields: PersonFields, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personFields' is not null or undefined
            assertParamExists('createPerson', 'personFields', personFields)
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete image of person
         * @param {string} personId Person ID.
         * @param {string} imageId Image ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImageOfPerson: async (personId: string, imageId: string, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('deleteImageOfPerson', 'personId', personId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('deleteImageOfPerson', 'imageId', imageId)
            const localVarPath = `/api/persons/{personId}/images/{imageId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)))
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson: async (personId: string, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('deletePerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person groups
         * @param {string} personId Person ID.
         * @param {number} page The page number to get a list of persons or groups.
         * @param {number} size The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupsByPersonId: async (personId: string, page: number, size: number, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getAllGroupsByPersonId', 'personId', personId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getAllGroupsByPersonId', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getAllGroupsByPersonId', 'size', size)
            const localVarPath = `/api/persons/{personId}/groups`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person images
         * @param {string} personId Person ID.
         * @param {number} page The page number to get a list of persons or groups.
         * @param {number} size The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllImagesByPersonId: async (personId: string, page: number, size: number, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getAllImagesByPersonId', 'personId', personId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getAllImagesByPersonId', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getAllImagesByPersonId', 'size', size)
            const localVarPath = `/api/persons/{personId}/images`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person image by id
         * @param {string} personId Person ID.
         * @param {string} imageId Image ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageOfPerson: async (personId: string, imageId: string, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getImageOfPerson', 'personId', personId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getImageOfPerson', 'imageId', imageId)
            const localVarPath = `/api/persons/{personId}/images/{imageId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)))
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson: async (personId: string, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getPerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update person
         * @param {string} personId Person ID.
         * @param {PersonFields} personFields Request body for the Person to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson: async (personId: string, personFields: PersonFields, xRequestID?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('updatePerson', 'personId', personId)
            // verify required parameter 'personFields' is not null or undefined
            assertParamExists('updatePerson', 'personFields', personFields)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID != null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonApi - functional programming interface
 * @export
 */
export const PersonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PersonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add person image
         * @param {string} personId Person ID.
         * @param {ImageFields} imageFields Image to add.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addImageToPerson(personId: string, imageFields: ImageFields, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Image>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addImageToPerson(personId, imageFields, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.addImageToPerson']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Create person
         * @param {PersonFields} personFields 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPerson(personFields: PersonFields, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(personFields, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.createPerson']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete image of person
         * @param {string} personId Person ID.
         * @param {string} imageId Image ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImageOfPerson(personId: string, imageId: string, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImageOfPerson(personId, imageId, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.deleteImageOfPerson']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Delete person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePerson(personId: string, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePerson(personId, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.deletePerson']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get person groups
         * @param {string} personId Person ID.
         * @param {number} page The page number to get a list of persons or groups.
         * @param {number} size The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGroupsByPersonId(personId: string, page: number, size: number, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGroupsByPersonId(personId, page, size, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.getAllGroupsByPersonId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get person images
         * @param {string} personId Person ID.
         * @param {number} page The page number to get a list of persons or groups.
         * @param {number} size The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllImagesByPersonId(personId: string, page: number, size: number, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagePage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllImagesByPersonId(personId, page, size, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.getAllImagesByPersonId']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get person image by id
         * @param {string} personId Person ID.
         * @param {string} imageId Image ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageOfPerson(personId: string, imageId: string, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageOfPerson(personId, imageId, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.getImageOfPerson']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPerson(personId: string, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPerson(personId, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.getPerson']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Update person
         * @param {string} personId Person ID.
         * @param {PersonFields} personFields Request body for the Person to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePerson(personId: string, personFields: PersonFields, xRequestID?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePerson(personId, personFields, xRequestID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PersonApi.updatePerson']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PersonApi - factory interface
 * @export
 */
export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PersonApiFp(configuration)
    return {
        /**
         * 
         * @summary Add person image
         * @param {string} personId Person ID.
         * @param {ImageFields} imageFields Image to add.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addImageToPerson(personId: string, imageFields: ImageFields, xRequestID?: string, options?: any): AxiosPromise<Image> {
            return localVarFp.addImageToPerson(personId, imageFields, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create person
         * @param {PersonFields} personFields 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson(personFields: PersonFields, xRequestID?: string, options?: any): AxiosPromise<Person> {
            return localVarFp.createPerson(personFields, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete image of person
         * @param {string} personId Person ID.
         * @param {string} imageId Image ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImageOfPerson(personId: string, imageId: string, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteImageOfPerson(personId, imageId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson(personId: string, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePerson(personId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person groups
         * @param {string} personId Person ID.
         * @param {number} page The page number to get a list of persons or groups.
         * @param {number} size The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupsByPersonId(personId: string, page: number, size: number, xRequestID?: string, options?: any): AxiosPromise<GroupPage> {
            return localVarFp.getAllGroupsByPersonId(personId, page, size, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person images
         * @param {string} personId Person ID.
         * @param {number} page The page number to get a list of persons or groups.
         * @param {number} size The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllImagesByPersonId(personId: string, page: number, size: number, xRequestID?: string, options?: any): AxiosPromise<ImagePage> {
            return localVarFp.getAllImagesByPersonId(personId, page, size, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person image by id
         * @param {string} personId Person ID.
         * @param {string} imageId Image ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageOfPerson(personId: string, imageId: string, xRequestID?: string, options?: any): AxiosPromise<File> {
            return localVarFp.getImageOfPerson(personId, imageId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson(personId: string, xRequestID?: string, options?: any): AxiosPromise<Person> {
            return localVarFp.getPerson(personId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update person
         * @param {string} personId Person ID.
         * @param {PersonFields} personFields Request body for the Person to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson(personId: string, personFields: PersonFields, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updatePerson(personId, personFields, xRequestID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonApi - object-oriented interface
 * @export
 * @class PersonApi
 * @extends {BaseAPI}
 */
export class PersonApi extends BaseAPI {
    /**
     * 
     * @summary Add person image
     * @param {string} personId Person ID.
     * @param {ImageFields} imageFields Image to add.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public addImageToPerson(personId: string, imageFields: ImageFields, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).addImageToPerson(personId, imageFields, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create person
     * @param {PersonFields} personFields 
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public createPerson(personFields: PersonFields, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).createPerson(personFields, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete image of person
     * @param {string} personId Person ID.
     * @param {string} imageId Image ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public deleteImageOfPerson(personId: string, imageId: string, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).deleteImageOfPerson(personId, imageId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete person
     * @param {string} personId Person ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public deletePerson(personId: string, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).deletePerson(personId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person groups
     * @param {string} personId Person ID.
     * @param {number} page The page number to get a list of persons or groups.
     * @param {number} size The page size with a list of persons or groups, items.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public getAllGroupsByPersonId(personId: string, page: number, size: number, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).getAllGroupsByPersonId(personId, page, size, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person images
     * @param {string} personId Person ID.
     * @param {number} page The page number to get a list of persons or groups.
     * @param {number} size The page size with a list of persons or groups, items.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public getAllImagesByPersonId(personId: string, page: number, size: number, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).getAllImagesByPersonId(personId, page, size, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person image by id
     * @param {string} personId Person ID.
     * @param {string} imageId Image ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public getImageOfPerson(personId: string, imageId: string, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).getImageOfPerson(personId, imageId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person
     * @param {string} personId Person ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public getPerson(personId: string, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).getPerson(personId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update person
     * @param {string} personId Person ID.
     * @param {PersonFields} personFields Request body for the Person to update.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonApi
     */
    public updatePerson(personId: string, personFields: PersonFields, xRequestID?: string, options?: RawAxiosRequestConfig) {
        return PersonApiFp(this.configuration).updatePerson(personId, personFields, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
}

