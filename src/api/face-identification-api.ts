/* tslint:disable */
/* eslint-disable */
/**
 * Regula Face SDK Web API
 * <a href=\"https://regulaforensics.com/products/face-recognition-sdk/  \" target=\"_blank\">Regula Face SDK</a> is a cross-platform biometric verification solution for a digital identity verification process. The SDK enables convenient and reliable face capture on the client side (mobile, web, and desktop) and further processing on the client or server side.  The Face SDK includes the following features:  * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-detection\" target=\"_blank\">Face Detection</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-comparison-11\" target=\"_blank\">Face Match (1:1)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-identification-1n\" target=\"_blank\">Face Search (1:N)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#liveness-assessment\" target=\"_blank\">Liveness Assessment</a>  Here is the <a href=\"https://github.com/regulaforensics/FaceSDK-web-openapi  \" target=\"_blank\">OpenAPI specification on GitHub</a>.   ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddImageToPersonRequest } from '../models';
// @ts-ignore
import { AddImageToPersonResponse } from '../models';
// @ts-ignore
import { Group } from '../models';
// @ts-ignore
import { GroupPage } from '../models';
// @ts-ignore
import { GroupToCreate } from '../models';
// @ts-ignore
import { ImagePage } from '../models';
// @ts-ignore
import { OperationLog } from '../models';
// @ts-ignore
import { Person } from '../models';
// @ts-ignore
import { PersonFields } from '../models';
// @ts-ignore
import { PersonToUpdateFields } from '../models';
// @ts-ignore
import { PersonsPage } from '../models';
// @ts-ignore
import { SearchBadParams } from '../models';
// @ts-ignore
import { SearchRequest } from '../models';
// @ts-ignore
import { SearchResult } from '../models';
// @ts-ignore
import { UpdateGroup } from '../models';
/**
 * FaceIdentificationApi - axios parameter creator
 * @export
 */
export const FaceIdentificationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add person image
         * @param {string} personId Person ID.
         * @param {AddImageToPersonRequest} addImageToPersonRequest Image to add.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addImageToPerson: async (personId: string, addImageToPersonRequest: AddImageToPersonRequest, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('addImageToPerson', 'personId', personId)
            // verify required parameter 'addImageToPersonRequest' is not null or undefined
            assertParamExists('addImageToPerson', 'addImageToPersonRequest', addImageToPersonRequest)
            const localVarPath = `/api/persons/{personId}/images`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addImageToPersonRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create group
         * @param {GroupToCreate} groupToCreate Request body for the group to create.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (groupToCreate: GroupToCreate, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupToCreate' is not null or undefined
            assertParamExists('createGroup', 'groupToCreate', groupToCreate)
            const localVarPath = `/api/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupToCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create person
         * @param {PersonFields} personFields 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson: async (personFields: PersonFields, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personFields' is not null or undefined
            assertParamExists('createPerson', 'personFields', personFields)
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete group
         * @param {string} groupId Group ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (groupId: string, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('deleteGroup', 'groupId', groupId)
            const localVarPath = `/api/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete image of person
         * @param {string} imageId Image ID.
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImageOfPerson: async (imageId: string, personId: string, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('deleteImageOfPerson', 'imageId', imageId)
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('deleteImageOfPerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}/images/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)))
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson: async (personId: string, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('deletePerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get groups
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroups: async (page?: number, size?: number, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person groups
         * @param {string} personId Person ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupsByPersonId: async (personId: string, page?: number, size?: number, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getAllGroupsByPersonId', 'personId', personId)
            const localVarPath = `/api/persons/{personId}/groups`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person images
         * @param {string} personId Person ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllImagesByPersonId: async (personId: string, page?: number, size?: number, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getAllImagesByPersonId', 'personId', personId)
            const localVarPath = `/api/persons/{personId}/images`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get group persons
         * @param {string} groupId Group ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPersonsByGroupId: async (groupId: string, page?: number, size?: number, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getAllPersonsByGroupId', 'groupId', groupId)
            const localVarPath = `/api/groups/{groupId}/persons`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get group
         * @param {string} groupId Group ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (groupId: string, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('getGroup', 'groupId', groupId)
            const localVarPath = `/api/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person image by id
         * @param {string} imageId Image ID.
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageOfPerson: async (imageId: string, personId: string, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getImageOfPerson', 'imageId', imageId)
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getImageOfPerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}/images/{imageId}`
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId)))
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson: async (personId: string, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('getPerson', 'personId', personId)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Find person by image in groups
         * @param {SearchRequest} searchRequest 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (searchRequest: SearchRequest, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'searchRequest' is not null or undefined
            assertParamExists('search', 'searchRequest', searchRequest)
            const localVarPath = `/api/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update group
         * @param {string} groupId Group ID.
         * @param {GroupToCreate} groupToCreate Request body for the group to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (groupId: string, groupToCreate: GroupToCreate, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updateGroup', 'groupId', groupId)
            // verify required parameter 'groupToCreate' is not null or undefined
            assertParamExists('updateGroup', 'groupToCreate', groupToCreate)
            const localVarPath = `/api/groups/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(groupToCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update person
         * @param {string} personId Person ID.
         * @param {PersonToUpdateFields} personToUpdateFields Request body for the Person to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson: async (personId: string, personToUpdateFields: PersonToUpdateFields, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'personId' is not null or undefined
            assertParamExists('updatePerson', 'personId', personId)
            // verify required parameter 'personToUpdateFields' is not null or undefined
            assertParamExists('updatePerson', 'personToUpdateFields', personToUpdateFields)
            const localVarPath = `/api/persons/{personId}`
                .replace(`{${"personId"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(personToUpdateFields, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add/remove persons to group
         * @param {string} groupId Group ID.
         * @param {UpdateGroup} updateGroup Request body for person IDs to add or remove.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonsInGroup: async (groupId: string, updateGroup: UpdateGroup, xRequestID?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('updatePersonsInGroup', 'groupId', groupId)
            // verify required parameter 'updateGroup' is not null or undefined
            assertParamExists('updatePersonsInGroup', 'updateGroup', updateGroup)
            const localVarPath = `/api/groups/{groupId}/persons`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRequestID !== undefined && xRequestID !== null) {
                localVarHeaderParameter['X-RequestID'] = String(xRequestID);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroup, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FaceIdentificationApi - functional programming interface
 * @export
 */
export const FaceIdentificationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FaceIdentificationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add person image
         * @param {string} personId Person ID.
         * @param {AddImageToPersonRequest} addImageToPersonRequest Image to add.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addImageToPerson(personId: string, addImageToPersonRequest: AddImageToPersonRequest, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddImageToPersonResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addImageToPerson(personId, addImageToPersonRequest, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create group
         * @param {GroupToCreate} groupToCreate Request body for the group to create.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(groupToCreate: GroupToCreate, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createGroup(groupToCreate, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create person
         * @param {PersonFields} personFields 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPerson(personFields: PersonFields, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPerson(personFields, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete group
         * @param {string} groupId Group ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(groupId: string, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGroup(groupId, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete image of person
         * @param {string} imageId Image ID.
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteImageOfPerson(imageId: string, personId: string, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteImageOfPerson(imageId, personId, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePerson(personId: string, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePerson(personId, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get groups
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGroups(page?: number, size?: number, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGroups(page, size, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get person groups
         * @param {string} personId Person ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllGroupsByPersonId(personId: string, page?: number, size?: number, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllGroupsByPersonId(personId, page, size, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get person images
         * @param {string} personId Person ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllImagesByPersonId(personId: string, page?: number, size?: number, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagePage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllImagesByPersonId(personId, page, size, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get group persons
         * @param {string} groupId Group ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPersonsByGroupId(groupId: string, page?: number, size?: number, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonsPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPersonsByGroupId(groupId, page, size, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get group
         * @param {string} groupId Group ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(groupId: string, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGroup(groupId, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get person image by id
         * @param {string} imageId Image ID.
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageOfPerson(imageId: string, personId: string, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageOfPerson(imageId, personId, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPerson(personId: string, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPerson(personId, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Find person by image in groups
         * @param {SearchRequest} searchRequest 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(searchRequest: SearchRequest, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(searchRequest, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update group
         * @param {string} groupId Group ID.
         * @param {GroupToCreate} groupToCreate Request body for the group to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(groupId: string, groupToCreate: GroupToCreate, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateGroup(groupId, groupToCreate, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update person
         * @param {string} personId Person ID.
         * @param {PersonToUpdateFields} personToUpdateFields Request body for the Person to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePerson(personId: string, personToUpdateFields: PersonToUpdateFields, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePerson(personId, personToUpdateFields, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add/remove persons to group
         * @param {string} groupId Group ID.
         * @param {UpdateGroup} updateGroup Request body for person IDs to add or remove.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePersonsInGroup(groupId: string, updateGroup: UpdateGroup, xRequestID?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePersonsInGroup(groupId, updateGroup, xRequestID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FaceIdentificationApi - factory interface
 * @export
 */
export const FaceIdentificationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FaceIdentificationApiFp(configuration)
    return {
        /**
         * 
         * @summary Add person image
         * @param {string} personId Person ID.
         * @param {AddImageToPersonRequest} addImageToPersonRequest Image to add.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addImageToPerson(personId: string, addImageToPersonRequest: AddImageToPersonRequest, xRequestID?: string, options?: any): AxiosPromise<AddImageToPersonResponse> {
            return localVarFp.addImageToPerson(personId, addImageToPersonRequest, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create group
         * @param {GroupToCreate} groupToCreate Request body for the group to create.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(groupToCreate: GroupToCreate, xRequestID?: string, options?: any): AxiosPromise<Group> {
            return localVarFp.createGroup(groupToCreate, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create person
         * @param {PersonFields} personFields 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson(personFields: PersonFields, xRequestID?: string, options?: any): AxiosPromise<Person> {
            return localVarFp.createPerson(personFields, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete group
         * @param {string} groupId Group ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(groupId: string, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGroup(groupId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete image of person
         * @param {string} imageId Image ID.
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteImageOfPerson(imageId: string, personId: string, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteImageOfPerson(imageId, personId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson(personId: string, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.deletePerson(personId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get groups
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroups(page?: number, size?: number, xRequestID?: string, options?: any): AxiosPromise<GroupPage> {
            return localVarFp.getAllGroups(page, size, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person groups
         * @param {string} personId Person ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllGroupsByPersonId(personId: string, page?: number, size?: number, xRequestID?: string, options?: any): AxiosPromise<GroupPage> {
            return localVarFp.getAllGroupsByPersonId(personId, page, size, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person images
         * @param {string} personId Person ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllImagesByPersonId(personId: string, page?: number, size?: number, xRequestID?: string, options?: any): AxiosPromise<ImagePage> {
            return localVarFp.getAllImagesByPersonId(personId, page, size, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get group persons
         * @param {string} groupId Group ID.
         * @param {number} [page] The page number to get a list of persons or groups.
         * @param {number} [size] The page size with a list of persons or groups, items.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPersonsByGroupId(groupId: string, page?: number, size?: number, xRequestID?: string, options?: any): AxiosPromise<PersonsPage> {
            return localVarFp.getAllPersonsByGroupId(groupId, page, size, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get group
         * @param {string} groupId Group ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(groupId: string, xRequestID?: string, options?: any): AxiosPromise<Group> {
            return localVarFp.getGroup(groupId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person image by id
         * @param {string} imageId Image ID.
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageOfPerson(imageId: string, personId: string, xRequestID?: string, options?: any): AxiosPromise<any> {
            return localVarFp.getImageOfPerson(imageId, personId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get person
         * @param {string} personId Person ID.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson(personId: string, xRequestID?: string, options?: any): AxiosPromise<Person> {
            return localVarFp.getPerson(personId, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Find person by image in groups
         * @param {SearchRequest} searchRequest 
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(searchRequest: SearchRequest, xRequestID?: string, options?: any): AxiosPromise<SearchResult> {
            return localVarFp.search(searchRequest, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update group
         * @param {string} groupId Group ID.
         * @param {GroupToCreate} groupToCreate Request body for the group to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(groupId: string, groupToCreate: GroupToCreate, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updateGroup(groupId, groupToCreate, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update person
         * @param {string} personId Person ID.
         * @param {PersonToUpdateFields} personToUpdateFields Request body for the Person to update.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson(personId: string, personToUpdateFields: PersonToUpdateFields, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updatePerson(personId, personToUpdateFields, xRequestID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add/remove persons to group
         * @param {string} groupId Group ID.
         * @param {UpdateGroup} updateGroup Request body for person IDs to add or remove.
         * @param {string} [xRequestID] Request header label.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonsInGroup(groupId: string, updateGroup: UpdateGroup, xRequestID?: string, options?: any): AxiosPromise<void> {
            return localVarFp.updatePersonsInGroup(groupId, updateGroup, xRequestID, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FaceIdentificationApi - object-oriented interface
 * @export
 * @class FaceIdentificationApi
 * @extends {BaseAPI}
 */
export class FaceIdentificationApi extends BaseAPI {
    /**
     * 
     * @summary Add person image
     * @param {string} personId Person ID.
     * @param {AddImageToPersonRequest} addImageToPersonRequest Image to add.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public addImageToPerson(personId: string, addImageToPersonRequest: AddImageToPersonRequest, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).addImageToPerson(personId, addImageToPersonRequest, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create group
     * @param {GroupToCreate} groupToCreate Request body for the group to create.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public createGroup(groupToCreate: GroupToCreate, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).createGroup(groupToCreate, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create person
     * @param {PersonFields} personFields 
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public createPerson(personFields: PersonFields, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).createPerson(personFields, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete group
     * @param {string} groupId Group ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public deleteGroup(groupId: string, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).deleteGroup(groupId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete image of person
     * @param {string} imageId Image ID.
     * @param {string} personId Person ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public deleteImageOfPerson(imageId: string, personId: string, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).deleteImageOfPerson(imageId, personId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete person
     * @param {string} personId Person ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public deletePerson(personId: string, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).deletePerson(personId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get groups
     * @param {number} [page] The page number to get a list of persons or groups.
     * @param {number} [size] The page size with a list of persons or groups, items.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public getAllGroups(page?: number, size?: number, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).getAllGroups(page, size, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person groups
     * @param {string} personId Person ID.
     * @param {number} [page] The page number to get a list of persons or groups.
     * @param {number} [size] The page size with a list of persons or groups, items.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public getAllGroupsByPersonId(personId: string, page?: number, size?: number, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).getAllGroupsByPersonId(personId, page, size, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person images
     * @param {string} personId Person ID.
     * @param {number} [page] The page number to get a list of persons or groups.
     * @param {number} [size] The page size with a list of persons or groups, items.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public getAllImagesByPersonId(personId: string, page?: number, size?: number, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).getAllImagesByPersonId(personId, page, size, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get group persons
     * @param {string} groupId Group ID.
     * @param {number} [page] The page number to get a list of persons or groups.
     * @param {number} [size] The page size with a list of persons or groups, items.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public getAllPersonsByGroupId(groupId: string, page?: number, size?: number, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).getAllPersonsByGroupId(groupId, page, size, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get group
     * @param {string} groupId Group ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public getGroup(groupId: string, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).getGroup(groupId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person image by id
     * @param {string} imageId Image ID.
     * @param {string} personId Person ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public getImageOfPerson(imageId: string, personId: string, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).getImageOfPerson(imageId, personId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get person
     * @param {string} personId Person ID.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public getPerson(personId: string, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).getPerson(personId, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Find person by image in groups
     * @param {SearchRequest} searchRequest 
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public search(searchRequest: SearchRequest, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).search(searchRequest, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update group
     * @param {string} groupId Group ID.
     * @param {GroupToCreate} groupToCreate Request body for the group to update.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public updateGroup(groupId: string, groupToCreate: GroupToCreate, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).updateGroup(groupId, groupToCreate, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update person
     * @param {string} personId Person ID.
     * @param {PersonToUpdateFields} personToUpdateFields Request body for the Person to update.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public updatePerson(personId: string, personToUpdateFields: PersonToUpdateFields, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).updatePerson(personId, personToUpdateFields, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add/remove persons to group
     * @param {string} groupId Group ID.
     * @param {UpdateGroup} updateGroup Request body for person IDs to add or remove.
     * @param {string} [xRequestID] Request header label.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FaceIdentificationApi
     */
    public updatePersonsInGroup(groupId: string, updateGroup: UpdateGroup, xRequestID?: string, options?: AxiosRequestConfig) {
        return FaceIdentificationApiFp(this.configuration).updatePersonsInGroup(groupId, updateGroup, xRequestID, options).then((request) => request(this.axios, this.basePath));
    }
}
