    /* tslint:disable */
    /* eslint-disable */
    /**
 * Regula FaceSDK Web API
 * Regula FaceSDK Web API
 *
 * The version of the OpenAPI document: 3.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


    import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
    import { Configuration } from '../configuration.js';
    // Some imports not used depending on template conditions
    // @ts-ignore
    import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base.js';
        // @ts-ignore
        import { ImagePage } from '../models/index.js';
        // @ts-ignore
        import { InlineObject } from '../models/index.js';
        // @ts-ignore
        import { Model1persons1personId } from '../models/index.js';
        // @ts-ignore
        import { Model1persons1personId1groups } from '../models/index.js';
        // @ts-ignore
        import { Model1persons1personId1images } from '../models/index.js';
        // @ts-ignore
        import { Model1persons1personId1images1imageId } from '../models/index.js';
        // @ts-ignore
        import { OperationLog } from '../models/index.js';
        // @ts-ignore
        import { Person } from '../models/index.js';
        // @ts-ignore
        import { PersonFields } from '../models/index.js';
        // @ts-ignore
        import { PersonsPage } from '../models/index.js';
    /**
    * PersonApi - axios parameter creator
    * @export
    */
    export const PersonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
        * 
            * @summary Add person image
            * @param {number} personId Person id
            * @param {InlineObject} inlineObject 
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        addImageToPerson: async (personId: number, inlineObject: InlineObject, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'personId' is not null or undefined
                    if (personId === null || personId === undefined) {
                    throw new RequiredError('personId','Required parameter personId was null or undefined when calling addImageToPerson.');
                    }
                    // verify required parameter 'inlineObject' is not null or undefined
                    if (inlineObject === null || inlineObject === undefined) {
                    throw new RequiredError('inlineObject','Required parameter inlineObject was null or undefined when calling addImageToPerson.');
                    }
            const localVarPath = `/api/persons/{person_id}/images`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                const needsSerialization = (typeof inlineObject !== "string" && !(inlineObject instanceof Uint8Array)) || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                localVarRequestOptions.data =  needsSerialization ? JSON.stringify(inlineObject !== undefined ? inlineObject : {}) : (inlineObject || "");

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Create person
            * @param {PersonFields} personFields Future person
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        createPerson: async (personFields: PersonFields, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'personFields' is not null or undefined
                    if (personFields === null || personFields === undefined) {
                    throw new RequiredError('personFields','Required parameter personFields was null or undefined when calling createPerson.');
                    }
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                const needsSerialization = (typeof personFields !== "string" && !(personFields instanceof Uint8Array)) || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                localVarRequestOptions.data =  needsSerialization ? JSON.stringify(personFields !== undefined ? personFields : {}) : (personFields || "");

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Delete image of person
            * @param {number} imageId Image id
            * @param {number} personId Person id
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        deleteImageOfPerson: async (imageId: number, personId: number, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'imageId' is not null or undefined
                    if (imageId === null || imageId === undefined) {
                    throw new RequiredError('imageId','Required parameter imageId was null or undefined when calling deleteImageOfPerson.');
                    }
                    // verify required parameter 'personId' is not null or undefined
                    if (personId === null || personId === undefined) {
                    throw new RequiredError('personId','Required parameter personId was null or undefined when calling deleteImageOfPerson.');
                    }
            const localVarPath = `/api/persons/{person_id}/images/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)))
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


        
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Delete person
            * @param {number} personId Person id
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        deletePerson: async (personId: number, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'personId' is not null or undefined
                    if (personId === null || personId === undefined) {
                    throw new RequiredError('personId','Required parameter personId was null or undefined when calling deletePerson.');
                    }
            const localVarPath = `/api/persons/{person_id}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


        
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Get person groups
            * @param {number} page Current page
            * @param {number} size Page size
            * @param {number} personId Person id
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getAllGroupsByPersonId: async (page: number, size: number, personId: number, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'page' is not null or undefined
                    if (page === null || page === undefined) {
                    throw new RequiredError('page','Required parameter page was null or undefined when calling getAllGroupsByPersonId.');
                    }
                    // verify required parameter 'size' is not null or undefined
                    if (size === null || size === undefined) {
                    throw new RequiredError('size','Required parameter size was null or undefined when calling getAllGroupsByPersonId.');
                    }
                    // verify required parameter 'personId' is not null or undefined
                    if (personId === null || personId === undefined) {
                    throw new RequiredError('personId','Required parameter personId was null or undefined when calling getAllGroupsByPersonId.');
                    }
            const localVarPath = `/api/persons/{person_id}/groups`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                    if (page !== undefined) {
                            localVarQueryParameter['page'] = page;
                    }

                    if (size !== undefined) {
                            localVarQueryParameter['size'] = size;
                    }


        
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Get person images
            * @param {number} page Current page
            * @param {number} size Page size
            * @param {number} personId Person id
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getAllImagesByPersonId: async (page: number, size: number, personId: number, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'page' is not null or undefined
                    if (page === null || page === undefined) {
                    throw new RequiredError('page','Required parameter page was null or undefined when calling getAllImagesByPersonId.');
                    }
                    // verify required parameter 'size' is not null or undefined
                    if (size === null || size === undefined) {
                    throw new RequiredError('size','Required parameter size was null or undefined when calling getAllImagesByPersonId.');
                    }
                    // verify required parameter 'personId' is not null or undefined
                    if (personId === null || personId === undefined) {
                    throw new RequiredError('personId','Required parameter personId was null or undefined when calling getAllImagesByPersonId.');
                    }
            const localVarPath = `/api/persons/{person_id}/images`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                    if (page !== undefined) {
                            localVarQueryParameter['page'] = page;
                    }

                    if (size !== undefined) {
                            localVarQueryParameter['size'] = size;
                    }


        
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Get persons
            * @param {number} page Current page
            * @param {number} size Page size
            * @param {string} [name] Person name keywords
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getAllPersons: async (page: number, size: number, name?: string, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'page' is not null or undefined
                    if (page === null || page === undefined) {
                    throw new RequiredError('page','Required parameter page was null or undefined when calling getAllPersons.');
                    }
                    // verify required parameter 'size' is not null or undefined
                    if (size === null || size === undefined) {
                    throw new RequiredError('size','Required parameter size was null or undefined when calling getAllPersons.');
                    }
            const localVarPath = `/api/persons`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

                    if (page !== undefined) {
                            localVarQueryParameter['page'] = page;
                    }

                    if (size !== undefined) {
                            localVarQueryParameter['size'] = size;
                    }

                    if (name !== undefined) {
                            localVarQueryParameter['name'] = name;
                    }


        
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Get person image by id
            * @param {number} imageId Image id
            * @param {number} personId Person id
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getImageOfPerson: async (imageId: number, personId: number, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'imageId' is not null or undefined
                    if (imageId === null || imageId === undefined) {
                    throw new RequiredError('imageId','Required parameter imageId was null or undefined when calling getImageOfPerson.');
                    }
                    // verify required parameter 'personId' is not null or undefined
                    if (personId === null || personId === undefined) {
                    throw new RequiredError('personId','Required parameter personId was null or undefined when calling getImageOfPerson.');
                    }
            const localVarPath = `/api/persons/{person_id}/images/{image_id}`
                .replace(`{${"image_id"}}`, encodeURIComponent(String(imageId)))
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


        
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Get person
            * @param {number} personId Person id
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        getPerson: async (personId: number, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'personId' is not null or undefined
                    if (personId === null || personId === undefined) {
                    throw new RequiredError('personId','Required parameter personId was null or undefined when calling getPerson.');
                    }
            const localVarPath = `/api/persons/{person_id}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


        
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        /**
        * 
            * @summary Update person
            * @param {number} personId Person id
            * @param {Model1persons1personId} body Metadata
        * @param {*} [options] Override http request option.
        * @throws {RequiredError}
        */
        updatePerson: async (personId: number, body: Model1persons1personId, options: any = {}): Promise<RequestArgs> => {
                    // verify required parameter 'personId' is not null or undefined
                    if (personId === null || personId === undefined) {
                    throw new RequiredError('personId','Required parameter personId was null or undefined when calling updatePerson.');
                    }
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                    throw new RequiredError('body','Required parameter body was null or undefined when calling updatePerson.');
                    }
            const localVarPath = `/api/persons/{person_id}`
                .replace(`{${"person_id"}}`, encodeURIComponent(String(personId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
            baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


        
                    localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
            query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
            query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
                const needsSerialization = (typeof body !== "string" && !(body instanceof Uint8Array)) || localVarRequestOptions.headers['Content-Type'] === 'application/json';
                localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
            options: localVarRequestOptions,
            };
            },
        }
        };

        /**
        * PersonApi - functional programming interface
        * @export
        */
        export const PersonApiFp = function(configuration?: Configuration) {
        return {
            /**
            * 
                * @summary Add person image
                * @param {number} personId Person id
                * @param {InlineObject} inlineObject 
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async addImageToPerson(personId: number, inlineObject: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model1persons1personId1images>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).addImageToPerson(personId, inlineObject, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Create person
                * @param {PersonFields} personFields Future person
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async createPerson(personFields: PersonFields, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).createPerson(personFields, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Delete image of person
                * @param {number} imageId Image id
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async deleteImageOfPerson(imageId: number, personId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).deleteImageOfPerson(imageId, personId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Delete person
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async deletePerson(personId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).deletePerson(personId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Get person groups
                * @param {number} page Current page
                * @param {number} size Page size
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async getAllGroupsByPersonId(page: number, size: number, personId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Model1persons1personId1groups>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).getAllGroupsByPersonId(page, size, personId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Get person images
                * @param {number} page Current page
                * @param {number} size Page size
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async getAllImagesByPersonId(page: number, size: number, personId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagePage>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).getAllImagesByPersonId(page, size, personId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Get persons
                * @param {number} page Current page
                * @param {number} size Page size
                * @param {string} [name] Person name keywords
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async getAllPersons(page: number, size: number, name?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonsPage>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).getAllPersons(page, size, name, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Get person image by id
                * @param {number} imageId Image id
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async getImageOfPerson(imageId: number, personId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).getImageOfPerson(imageId, personId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Get person
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async getPerson(personId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).getPerson(personId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
            /**
            * 
                * @summary Update person
                * @param {number} personId Person id
                * @param {Model1persons1personId} body Metadata
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
            async updatePerson(personId: number, body: Model1persons1personId, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PersonApiAxiosParamCreator(configuration).updatePerson(personId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
            const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
            return axios.request(axiosRequestArgs);
            };
            },
        }
        };

        /**
        * PersonApi - factory interface
        * @export
        */
        export const PersonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
        return {
            /**
            * 
                * @summary Add person image
                * @param {number} personId Person id
                * @param {InlineObject} inlineObject 
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        addImageToPerson(personId: number, inlineObject: InlineObject, options?: any): AxiosPromise<Model1persons1personId1images> {
            return PersonApiFp(configuration).addImageToPerson(personId, inlineObject, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Create person
                * @param {PersonFields} personFields Future person
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        createPerson(personFields: PersonFields, options?: any): AxiosPromise<Person> {
            return PersonApiFp(configuration).createPerson(personFields, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Delete image of person
                * @param {number} imageId Image id
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        deleteImageOfPerson(imageId: number, personId: number, options?: any): AxiosPromise<void> {
            return PersonApiFp(configuration).deleteImageOfPerson(imageId, personId, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Delete person
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        deletePerson(personId: number, options?: any): AxiosPromise<void> {
            return PersonApiFp(configuration).deletePerson(personId, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Get person groups
                * @param {number} page Current page
                * @param {number} size Page size
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        getAllGroupsByPersonId(page: number, size: number, personId: number, options?: any): AxiosPromise<Model1persons1personId1groups> {
            return PersonApiFp(configuration).getAllGroupsByPersonId(page, size, personId, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Get person images
                * @param {number} page Current page
                * @param {number} size Page size
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        getAllImagesByPersonId(page: number, size: number, personId: number, options?: any): AxiosPromise<ImagePage> {
            return PersonApiFp(configuration).getAllImagesByPersonId(page, size, personId, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Get persons
                * @param {number} page Current page
                * @param {number} size Page size
                * @param {string} [name] Person name keywords
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        getAllPersons(page: number, size: number, name?: string, options?: any): AxiosPromise<PersonsPage> {
            return PersonApiFp(configuration).getAllPersons(page, size, name, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Get person image by id
                * @param {number} imageId Image id
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        getImageOfPerson(imageId: number, personId: number, options?: any): AxiosPromise<any> {
            return PersonApiFp(configuration).getImageOfPerson(imageId, personId, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Get person
                * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        getPerson(personId: number, options?: any): AxiosPromise<Person> {
            return PersonApiFp(configuration).getPerson(personId, options).then((request) => request(axios, basePath));
            },
            /**
            * 
                * @summary Update person
                * @param {number} personId Person id
                * @param {Model1persons1personId} body Metadata
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            */
        updatePerson(personId: number, body: Model1persons1personId, options?: any): AxiosPromise<void> {
            return PersonApiFp(configuration).updatePerson(personId, body, options).then((request) => request(axios, basePath));
            },
        };
        };

        /**
        * PersonApi - object-oriented interface
        * @export
        * @class PersonApi
        * @extends {BaseAPI}
        */
            export class PersonApi extends BaseAPI {
            /**
            * 
                * @summary Add person image
                    * @param {number} personId Person id
                    * @param {InlineObject} inlineObject 
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected addImageToPersonGen(personId: number, inlineObject: InlineObject, options?: any) {
                return PersonApiFp(this.configuration).addImageToPerson(personId, inlineObject, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Create person
                    * @param {PersonFields} personFields Future person
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected createPersonGen(personFields: PersonFields, options?: any) {
                return PersonApiFp(this.configuration).createPerson(personFields, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Delete image of person
                    * @param {number} imageId Image id
                    * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected deleteImageOfPersonGen(imageId: number, personId: number, options?: any) {
                return PersonApiFp(this.configuration).deleteImageOfPerson(imageId, personId, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Delete person
                    * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected deletePersonGen(personId: number, options?: any) {
                return PersonApiFp(this.configuration).deletePerson(personId, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Get person groups
                    * @param {number} page Current page
                    * @param {number} size Page size
                    * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected getAllGroupsByPersonIdGen(page: number, size: number, personId: number, options?: any) {
                return PersonApiFp(this.configuration).getAllGroupsByPersonId(page, size, personId, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Get person images
                    * @param {number} page Current page
                    * @param {number} size Page size
                    * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected getAllImagesByPersonIdGen(page: number, size: number, personId: number, options?: any) {
                return PersonApiFp(this.configuration).getAllImagesByPersonId(page, size, personId, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Get persons
                    * @param {number} page Current page
                    * @param {number} size Page size
                    * @param {string} [name] Person name keywords
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected getAllPersonsGen(page: number, size: number, name?: string, options?: any) {
                return PersonApiFp(this.configuration).getAllPersons(page, size, name, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Get person image by id
                    * @param {number} imageId Image id
                    * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected getImageOfPersonGen(imageId: number, personId: number, options?: any) {
                return PersonApiFp(this.configuration).getImageOfPerson(imageId, personId, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Get person
                    * @param {number} personId Person id
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected getPersonGen(personId: number, options?: any) {
                return PersonApiFp(this.configuration).getPerson(personId, options).then((request) => request(this.axios, this.basePath));
                }

            /**
            * 
                * @summary Update person
                    * @param {number} personId Person id
                    * @param {Model1persons1personId} body Metadata
            * @param {*} [options] Override http request option.
            * @throws {RequiredError}
            * @memberof PersonApi
            */
                protected updatePersonGen(personId: number, body: Model1persons1personId, options?: any) {
                return PersonApiFp(this.configuration).updatePerson(personId, body, options).then((request) => request(this.axios, this.basePath));
                }
        }
