/* tslint:disable */
/* eslint-disable */
/**
 * Regula Face SDK Web API
 * <a href=\"https://regulaforensics.com/products/face-recognition-sdk/  \" target=\"_blank\">Regula Face SDK</a> is a cross-platform biometric verification solution for a digital identity verification process and image quality assurance. The SDK enables convenient and reliable face capture on the client side (mobile, web, and desktop) and further processing on the client or server side.   The Face SDK includes the following features:  * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-detection\" target=\"_blank\">Face detection and image quality assessment</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-comparison-11\" target=\"_blank\">Face match (1:1)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#face-identification-1n\" target=\"_blank\">Face search (1:N)</a> * <a href=\"https://docs.regulaforensics.com/develop/face-sdk/overview/introduction/#liveness-assessment\" target=\"_blank\">Liveness detection</a>  Here is the <a href=\"https://github.com/regulaforensics/FaceSDK-web-openapi  \" target=\"_blank\">OpenAPI specification on GitHub</a>.   ### Clients * [JavaScript](https://github.com/regulaforensics/FaceSDK-web-js-client) client for the browser and node.js based on axios * [Java](https://github.com/regulaforensics/FaceSDK-web-java-client) client compatible with jvm and android * [Python](https://github.com/regulaforensics/FaceSDK-web-python-client) 3.5+ client * [C#](https://github.com/regulaforensics/FaceSDK-web-csharp-client) client for .NET & .NET Core 
 *
 * The version of the OpenAPI document: 6.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { AddImageToPersonRequestImage } from './add-image-to-person-request-image';
import { OutputImageParams } from './output-image-params';

/**
 * Image in the request data, includes image and contentType.
 * @export
 * @interface ImageFields
 */
export interface ImageFields {
    /**
     * Session identificator, should be unique for each session.
     * @type {string}
     * @memberof ImageFields
     */
    'tag'?: string;
    /**
     * 
     * @type {AddImageToPersonRequestImage}
     * @memberof ImageFields
     */
    'image'?: AddImageToPersonRequestImage;
    /**
     * 
     * @type {OutputImageParams}
     * @memberof ImageFields
     */
    'outputImageParams'?: OutputImageParams;
    /**
     * Whether to detect all faces in the image. If set to `false`, only the most central face is detected.
     * @type {boolean}
     * @memberof ImageFields
     */
    'detectAll'?: boolean;
    /**
     * The similarity threshold.
     * @type {number}
     * @memberof ImageFields
     */
    'threshold'?: number;
    /**
     * The maximum number of results to be returned.
     * @type {number}
     * @memberof ImageFields
     */
    'limit'?: number;
}

